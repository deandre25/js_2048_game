{"version":3,"sources":["scripts/main.js"],"names":["field","scoreCount","btnStart","document","querySelector","cells","loseMessage","winMessage","startMessage","score","CELLS_IN_ROW","startGame","rndCell","keyboardListener","rowIdx","Math","floor","random","columnIdx","renderCells","i","j","rows","className","classList","add","textContent","addEventListener","keyAction","e","compareField","JSON","parse","stringify","key","ArrowUp","ArrowDown","ArrowRight","ArrowLeft","hasFieldChanged","haveMoves","remove","removeEventListener","isWin","newRow","canMove","move","length","reverse","row","replaceZeros","canMerge","canSlide","haveFreeCells","some","cell","haveMerges","filter","num","push","contains"],"mappings":"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","file":"main.18afef9d.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst btnStart = document.querySelector('.start');\nconst cells = document.querySelector('tbody');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst startMessage = document.querySelector('.message-start');\nconst score = document.querySelector('.game-score');\n\nconst CELLS_IN_ROW = 4;\nlet field;\nlet scoreCount;\n\nbtnStart.addEventListener('click', () => {\n  if (btnStart.classList.contains('start')) {\n    btnStart.classList.remove('start');\n    btnStart.classList.add('restart');\n    btnStart.textContent = 'Restart';\n    startMessage.classList.add('hidden');\n    startGame();\n  } else {\n    startGame();\n    loseMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n  }\n});\n\nfunction startGame() {\n  field = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  scoreCount = 0;\n  rndCell();\n  keyboardListener();\n}\n\nfunction rndCell() {\n  while (true) {\n    const rowIdx = Math.floor(Math.random() * CELLS_IN_ROW);\n    const columnIdx = Math.floor(Math.random() * CELLS_IN_ROW);\n\n    if (field[rowIdx][columnIdx] === 0) {\n      field[rowIdx][columnIdx] = Math.random() < 0.9 ? 2 : 4;\n      break;\n    }\n  }\n\n  renderCells();\n}\n\nfunction renderCells() {\n  for (let i = 0; i < CELLS_IN_ROW; i++) {\n    for (let j = 0; j < CELLS_IN_ROW; j++) {\n      cells.rows[i].cells[j].className = '';\n      cells.rows[i].cells[j].classList.add(`field-cell`);\n      cells.rows[i].cells[j].classList.add(`field-cell--${field[i][j]}`);\n      cells.rows[i].cells[j].textContent = field[i][j] || '';\n    }\n  }\n}\n\nfunction keyboardListener() {\n  document.addEventListener('keydown', keyAction);\n}\n\nfunction keyAction(e) {\n  const compareField = JSON.parse(JSON.stringify(field));\n\n  switch (e.key) {\n    case 'ArrowUp':\n      ArrowUp();\n      break;\n\n    case 'ArrowDown':\n      ArrowDown();\n      break;\n\n    case 'ArrowRight':\n      ArrowRight();\n      break;\n\n    case 'ArrowLeft':\n      ArrowLeft();\n      break;\n\n    default:\n      break;\n  }\n\n  if (hasFieldChanged(compareField)) {\n    rndCell();\n    score.textContent = scoreCount;\n  }\n\n  if (!haveMoves()) {\n    loseMessage.classList.remove('hidden');\n    document.removeEventListener('keydown', keyAction);\n  }\n\n  if (isWin()) {\n    winMessage.classList.remove('hidden');\n  }\n}\n\nfunction ArrowUp() {\n  for (let i = 0; i < CELLS_IN_ROW; i++) {\n    let newRow = [\n      field[0][i],\n      field[1][i],\n      field[2][i],\n      field[3][i],\n    ];\n\n    if (canMove(newRow)) {\n      newRow = move(newRow);\n\n      for (let j = 0; j < newRow.length; j++) {\n        field[j][i] = newRow[j];\n      }\n    }\n  }\n}\n\nfunction ArrowDown() {\n  for (let i = 0; i < CELLS_IN_ROW; i++) {\n    let newRow = [\n      field[0][i],\n      field[1][i],\n      field[2][i],\n      field[3][i],\n    ];\n\n    if (canMove([...newRow].reverse())) {\n      newRow = move(newRow.reverse()).reverse();\n\n      for (let j = 0; j < newRow.length; j++) {\n        field[j][i] = newRow[j];\n      }\n    }\n  }\n}\n\nfunction ArrowLeft() {\n  for (let i = 0; i < CELLS_IN_ROW; i++) {\n    let newRow = field[i];\n\n    if (canMove(newRow)) {\n      newRow = move(field[i]);\n\n      for (let j = 0; j < newRow.length; j++) {\n        field[i][j] = newRow[j];\n      }\n    }\n  }\n}\n\nfunction ArrowRight() {\n  for (let i = 0; i < CELLS_IN_ROW; i++) {\n    let newRow = field[i];\n\n    if (canMove([...newRow].reverse())) {\n      newRow = move(newRow.reverse()).reverse();\n\n      for (let j = 0; j < newRow.length; j++) {\n        field[i][j] = newRow[j];\n      }\n    }\n  }\n}\n\nfunction move(row) {\n  let newRow = replaceZeros(row);\n\n  for (let i = 0; i < newRow.length; i++) {\n    if (newRow[i] === newRow[i + 1] && newRow[i] !== 0) {\n      newRow[i] = newRow[i] * 2;\n      newRow[i + 1] = 0;\n      scoreCount += newRow[i];\n    }\n  }\n\n  newRow = replaceZeros(newRow);\n\n  return newRow;\n}\n\nfunction canMove(row) {\n  for (let i = 0; i < row.length - 1; i++) {\n    const canMerge = (row[i] === row[i + 1]) && (row[i] !== 0);\n    const canSlide = (row[i] === 0) && (row[i + 1] !== 0);\n\n    if (canMerge || canSlide) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction haveMoves() {\n  const haveFreeCells = field.some(row => row.some(cell => cell === 0));\n  let haveMerges = false;\n\n  for (let i = 0; i < CELLS_IN_ROW; i++) {\n    for (let j = 0; j < CELLS_IN_ROW - 1; j++) {\n      if (field[i][j] === field[i][j + 1]) {\n        haveMerges = true;\n        break;\n      }\n    }\n  }\n\n  for (let i = 0; i < CELLS_IN_ROW - 1; i++) {\n    for (let j = 0; j < CELLS_IN_ROW; j++) {\n      if (field[i][j] === field[i + 1][j]) {\n        haveMerges = true;\n        break;\n      }\n    }\n  }\n\n  return haveFreeCells || haveMerges;\n}\n\nfunction isWin() {\n  for (let i = 0; i < CELLS_IN_ROW; i++) {\n    for (let j = 0; j < CELLS_IN_ROW; j++) {\n      if (field[i][j] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction replaceZeros(row) {\n  const newRow = row.filter(num => num !== 0);\n\n  while (newRow.length < CELLS_IN_ROW) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction hasFieldChanged(compareField) {\n  for (let i = 0; i < CELLS_IN_ROW; i++) {\n    for (let j = 0; j < CELLS_IN_ROW; j++) {\n      if (compareField[i][j] !== field[i][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n"]}